{"version":3,"sources":["constants/projects.js","pages/Projects.js","util/routes.js","pages/About.js","pages/Contact.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["projects","title","descs","srcDesc","src","createProjects","map","project","index","key","undefined","desc","href","style","color","routes","path","name","showInSidebar","component","defualtRoute","Routes","route","exact","from","to","Sidebar","className","filter","activeStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAAO,IAAMA,EAAW,CACtB,CACEC,MAAO,YACPC,MAAO,CAAC,8CACRC,QAAS,cACTC,IAAK,2CAEP,CACEH,MAAO,8BACPC,MAAO,CACL,6IAGFC,QAAS,cACTC,IAAK,yCAEP,CACEH,MAAO,gBACPC,MAAO,CACL,0QAEA,+OAGFC,QAAS,cACTC,IAAK,6CCfT,SAASC,IACP,OAAOL,EAASM,KAAI,SAACC,EAASC,GAC5B,OACE,yBAAKC,IAAKD,GACPD,EAAQN,MACT,iCAXQS,KADaR,EAaEK,EAAQL,OAZL,KACzBA,EAAMI,KAAI,SAACK,EAAMH,GACtB,OAAO,0BAAMC,IAAKD,GAAQG,MAWpB,uBAAGC,KAAML,EAAQH,IAAKS,MAAO,CAAEC,MAAO,UACnCP,EAAQJ,UAGb,8BAlBR,IAA6BD,KCItB,IAAMa,EAAS,CACpB,CACEC,KAAM,SACNC,KAAM,QACNC,eAAe,EACfC,UCVW,WACb,OACE,6BACE,qCACA,6BACA,kSAMA,sMAKA,uLDLFC,cAAc,GAEhB,CACEJ,KAAM,YACNC,KAAM,WACNC,eAAe,EACfC,UDQW,WACb,OACE,6BACE,wCACA,6BACA,2BAAId,QCXR,CACEW,KAAM,WACNC,KAAM,UACNC,eAAe,EACfC,UEvBW,WACb,OACE,6BACE,uCACA,6BACA,4DF8BS,SAASE,IACtB,OACE,6BACE,kBAAC,IAAD,KAVGN,EAAOT,KAAI,SAACgB,EAAOd,GACxB,OACE,kBAAC,IAAD,CAAOQ,KAAMM,EAAMN,KAAMG,UAAWG,EAAMH,UAAWI,OAAK,EAACd,IAAKD,OAU9D,kBAAC,IAAD,CAAUgB,KAAK,IAAIC,GAAG,aGPfC,MAXf,WACE,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,4BACb,8CACA,kDAxBGZ,EACJa,QAAO,SAACN,GAAD,OAAWA,EAAMJ,iBACxBZ,KAAI,SAACgB,EAAOd,GACX,OACE,yBAAKC,IAAKD,GACR,6BACA,kBAAC,IAAD,CACEiB,GAAIH,EAAMN,KACVW,UAAU,IACVE,YAAa,CAAEf,MAAO,SACtBS,OAAK,GAEJD,EAAML,YCGJa,MAbf,WACE,OACE,yBAAKH,UAAU,UACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAACN,EAAD,UCDUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2746ee2e.chunk.js","sourcesContent":["export const projects = [\n  {\n    title: 'portfolio',\n    descs: ['this is a portfolio website using react.js'],\n    srcDesc: 'github-link',\n    src: 'https://github.com/yyagoub/portfolio-v2',\n  },\n  {\n    title: 'semi-enterprise application',\n    descs: [\n      'here I was trying to simulate an enterprise-level application that has secured apis,' +\n        ' I used spring boot application and mysql as database',\n    ],\n    srcDesc: 'github-link',\n    src: 'https://github.com/yyagoub/enterprise',\n  },\n  {\n    title: 'microservices',\n    descs: [\n      'this project created to demonstrate the learning process with spring ecosystem. While  I was trying to get into micro-services, and for sure I tried YouTube and udemy, ' +\n        'I was facing many problems following up with the instructors duo the coupled code or services. ',\n      'So, I intended to break down each service while keeping it (simple stupid). ' +\n        'Yet I dont have useful code to share, I would like to share with you samples of micro-services using different services, while keeping it as simple as possible',\n    ],\n    srcDesc: 'github-link',\n    src: 'https://github.com/yyagoub/microservices',\n  },\n];\n","import React from 'react';\nimport { projects } from '../constants/projects';\n\nfunction createProjectsDescs(descs) {\n  if (descs === undefined) return null;\n  return descs.map((desc, index) => {\n    return <span key={index}>{desc}</span>;\n    //return <p key={index}>{desc}</p>;\n  });\n}\nfunction createProjects() {\n  return projects.map((project, index) => {\n    return (\n      <dev key={index}>\n        {project.title}\n        <ul>\n          {createProjectsDescs(project.descs)}\n          <a href={project.src} style={{ color: 'white' }}>\n            {project.srcDesc}\n          </a>\n        </ul>\n        <br />\n      </dev>\n    );\n  });\n}\n\nexport default function Projects() {\n  return (\n    <div>\n      <h2>Projects</h2>\n      <br />\n      <p>{createProjects()}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport About from '../pages/About';\nimport Projects from '../pages/Projects';\nimport Contact from '../pages/Contact';\n\nexport const routes = [\n  {\n    path: '/about',\n    name: 'About',\n    showInSidebar: true,\n    component: About,\n    defualtRoute: true,\n  },\n  {\n    path: '/projects',\n    name: 'Projects',\n    showInSidebar: true,\n    component: Projects,\n  },\n  {\n    path: '/contact',\n    name: 'Contact',\n    showInSidebar: true,\n    component: Contact,\n  },\n];\n\nfunction getRoutes() {\n  return routes.map((route, index) => {\n    return (\n      <Route path={route.path} component={route.component} exact key={index} />\n    );\n  });\n}\n\nexport default function Routes() {\n  return (\n    <div>\n      <Switch>\n        {getRoutes(routes)}\n        <Redirect from='*' to='/about' />\n      </Switch>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function About() {\n  return (\n    <div>\n      <h2>About</h2>\n      <br />\n      <p>\n        Iâ€™m a software developer, lucky enough to love what I do for living,\n        specialist in server-side applications and did some client-side\n        applications using React. Passionate for new technologies, and always\n        trying to implement and document what I've learned.\n      </p>\n      <p>\n        I feel myself in a constant search for pragmatic solutions. Not one for\n        tradition, striving for innovation, while helping those around me to\n        with product requirements.\n      </p>\n      <p>\n        Tools and Technologies: Java, JavaScript, Git, Maven, Npm, SQL, Spring\n        Boot Frameworks (Web, Data, Security, ..), React.js (Redux, Axios,\n        Router, ..).\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Contact() {\n  return (\n    <div>\n      <h2>Contact</h2>\n      <br />\n      <p>yousef.y.yagoub@gmail.com</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { routes } from '../util/routes';\n\nfunction createLinkes() {\n  return routes\n    .filter((route) => route.showInSidebar)\n    .map((route, index) => {\n      return (\n        <dev key={index}>\n          <br />\n          <NavLink\n            to={route.path}\n            className='a'\n            activeStyle={{ color: 'white' }}\n            exact\n          >\n            {route.name}\n          </NavLink>\n        </dev>\n      );\n    });\n}\n\nfunction Sidebar() {\n  return (\n    <div className='section-1'>\n      <i className='fas fa-code fa-5x white'></i>\n      <h2>Yousef Yagoub,</h2>\n      <p>Software Developer.</p>\n      {createLinkes()}\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport { HashRouter as BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport './style.css';\nimport Sidebar from './components/Sidebar';\nimport Routes from './util/routes';\n\nfunction App() {\n  return (\n    <div className='grid-2'>\n      <BrowserRouter>\n        <Sidebar />\n        <div className='section-2'>\n          <Routes />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}